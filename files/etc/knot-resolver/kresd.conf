
if env.LOCAL_ADDRESS then
	local split = require 'split'.split
	for key, ip in pairs(split(env.LOCAL_ADDRESS, ',')) do
		net.listen(ip, 2053)
	end
else
	net.listen('0.0.0.0', 2053)
end
if env.HEALTHCHECK_LISTEN_IP then
	net.listen(env.HEALTHCHECK_LISTEN_IP, 2053)
end

modules = {
	'stats',
	'nsid',
	'serve_stale',
	'hints > iterate'
}

trust_anchors.remove('.')
modules.unload('policy')
modules.unload('ta_signal_query')
modules.unload('ta_sentinel')
modules.unload('ta_update')
modules.unload('priming')

cache.size = (tonumber(env.CACHESIZE) or 2) * MB

reorder_RR(true)

hints.root({
	['ns2.opennic.glue'] = { '161.97.219.84', '2001:470:4212:10:0:100:53:10' },
	['ns4.opennic.glue'] = { '163.172.168.171' },
	['ns5.opennic.glue'] = { '94.103.153.176', '2a02:990:219:1:ba:1337:cafe:3' },
	['ns6.opennic.glue'] = { '207.192.71.13' },
	['ns8.opennic.glue'] = { '178.63.116.152', '2a01:4f8:141:4281::999' },
	['ns9.opennic.glue'] = { '51.77.227.84' },
	['ns11.opennic.glue'] = { '51.75.173.177' },
	['ns12.opennic.glue'] = { '79.124.7.81' },
	['ns13.opennic.glue'] = { '144.76.103.143', '2a01:4f8:192:43a5::2' }
})

local name = hostname()
local pkgver = package_version()
nsid.name(name)

local influx = {
	proto       = env.INFLUXDB_PROTO          or 'http',
	host        = env.INFLUXDB_HOST           or nil,
	user        = env.INFLUXDB_USER           or nil,
	pass        = env.INFLUXDB_PASS           or nil,
	database    = env.INFLUXDB_DATABASE       or nil,
	port        = tonumber(env.INFLUXDB_PORT) or 8086,
	measurement = env.INFLUXDB_MEASUREMENT    or 'kresd'
}

if influx.proto and influx.host and influx.user and influx.pass and influx.database and influx.port and influx.measurement then
	require 'socket'
	local http = require('socket.http')
	influx.url = influx.proto .. '://' .. influx.user .. ':' .. influx.pass .. '@' .. influx.host .. ':' .. influx.port .. '/write?db=' .. influx.database
	local prev_stats = {}
	local prev_ts = socket.gettime()
	local statswrite_inflight = false
	function write_stats_to_influxdb()
		if statswrite_inflight == true then
			return
		end
		statswrite_inflight = true
		local tags_kv = {
			hostname = name,
			version = pkgver
		}
		local tags = {}
		for k, v in pairs(tags_kv) do
			table.insert(tags, k .. '=' .. v)
		end
		local fields = {}
		local stats = stats.list()
		local ts = socket.gettime()
		for k, v in pairs(stats) do
			local prev_value = prev_stats[k] or 0
			table.insert(fields, k:gsub('%.', '_') .. '=' .. (v - prev_value) .. 'i')
		end
		fields.metrictimedelta = ts - prev_ts
		line = influx.measurement .. ',' .. table.concat(tags, ',') .. ' ' .. table.concat(fields, ',') .. ' ' .. string.format('%.f', ts * 1000000000)
		local body, code = http.request(influx.url, line)
		if body ~= nil and code >= 200 and code < 300 then
			prev_stats = stats
			prev_ts = ts
		end
		statswrite_inflight = false
	end
	print('Sending InfluxDB metrics to ' .. influx.url)
	worker.coroutine(function ()
		event.recurrent(1 * sec, function (e)
			write_stats_to_influxdb()
		end)
	end)
end
